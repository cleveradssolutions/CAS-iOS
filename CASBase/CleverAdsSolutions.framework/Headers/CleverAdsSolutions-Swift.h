#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 5.2.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CleverAdsSolutions",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class CASSettings;
@class CASMediationManager;

SWIFT_CLASS("_TtC18CleverAdsSolutions3CAS")
@interface CAS : NSObject
+ (NSString * _Nonnull)getSDKVersion SWIFT_WARN_UNUSED_RESULT;
/// Get singleton instance for configure all mediation managers
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CASSettings * _Nonnull settings;)
+ (CASSettings * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Get last initialized [MediationManager]
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CASMediationManager * _Nullable manager;)
+ (CASMediationManager * _Nullable)manager SWIFT_WARN_UNUSED_RESULT;
/// Initialize new [MediationManager] and save in [manager] field.
/// Can be called for different identifiers to create different managers.
/// After initialization, advertising content of [enabledAdTypes] is loading automatically.
/// \param managerID CAS manager (Placement) identifier or null when matches the app package
///
/// \param enableTypes Enabled Ad types for loading automatically.
/// Ad types can be enabled manually after initialize by [MediationManager.setEnabled]
///
/// \param demoAdMode Enable demo mode that will always request test ads
///
/// \param onInit Initialization listener
///
+ (CASMediationManager * _Nonnull)createWithManagerID:(NSString * _Nonnull)managerID enableTypes:(NSUInteger)enableTypes demoAdMode:(BOOL)demoAdMode onInit:(void (^ _Nullable)(BOOL, NSString * _Nullable))onInit SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum CASType : NSInteger;

SWIFT_PROTOCOL("_TtP18CleverAdsSolutions16CASStatusHandler_")
@protocol CASStatusHandler
@property (nonatomic, readonly) enum CASType adType;
@property (nonatomic, readonly, copy) NSString * _Nonnull status;
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly, copy) NSString * _Nonnull versionInfo;
@property (nonatomic, readonly, copy) NSString * _Nonnull error;
- (BOOL)isAdCached SWIFT_WARN_UNUSED_RESULT;
- (void)toggleIgnoreMode;
@end


SWIFT_CLASS_NAMED("CASAgent")
@interface CASAgent : NSObject <CASStatusHandler>
@property (nonatomic, readonly, copy) NSString * _Nonnull status;
@property (nonatomic, readonly) enum CASType adType;
@property (nonatomic, readonly, copy) NSString * _Nonnull error;
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull versionInfo;
- (BOOL)isAdCached SWIFT_WARN_UNUSED_RESULT;
- (void)toggleIgnoreMode;
@end


SWIFT_PROTOCOL("_TtP18CleverAdsSolutions19CASAnalyticsHandler_")
@protocol CASAnalyticsHandler
- (void)log:(NSString * _Nonnull)eventName :(NSDictionary<NSString *, id> * _Nonnull)map;
@end

typedef SWIFT_ENUM(NSInteger, CASAudience, closed) {
  CASAudienceUndefined = 0,
  CASAudienceChildren = 1,
  CASAudienceNotChildren = 2,
};


SWIFT_CLASS_NAMED("CASBannerAgent")
@interface CASBannerAgent : CASAgent
- (nonnull instancetype)init;
- (BOOL)isAdCached SWIFT_WARN_UNUSED_RESULT;
@end

@class NSCoder;
@class UIViewController;
@protocol CASCallback;
@class CASSize;
enum CASPosition : NSInteger;

SWIFT_CLASS("_TtC18CleverAdsSolutions13CASBannerView")
@interface CASBannerView : UIView
- (nonnull instancetype)initWithManager:(CASMediationManager * _Nullable)manager OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// This view controller is used to present an overlay when the ad is clicked.
/// It should normally be set to the view controller that contains the CASBannerView
@property (nonatomic, weak) UIViewController * _Nullable rootViewController;
@property (nonatomic, weak) CASMediationManager * _Nullable manager;
@property (nonatomic, weak) id <CASCallback> _Nullable delegate;
/// The size of the Banner Ad.
@property (nonatomic, strong) CASSize * _Nonnull adSize;
/// The position of the Banner Ad using CASPosition.
@property (nonatomic) enum CASPosition adPostion;
/// Manual load Banner Ad or reload current loaded Ad for cancel impression.
/// You should use this method on [AdsSettings.loadingMode] == [LoadingManagerMode.Manual] before show ad.
/// This functionality is available only after [CAS.initialize].
/// You can get a callback for the successful loading of an ad by subscribe [MediationManager.onAdLoadEvent].
- (void)loadNextAd;
/// The adaptive banner size depends on the screen orientation.
/// If is TRUE then the size will be automatically recalculate when the orientation is changed.
/// If is FALSE then the banner will be hidden and it will be required
/// to calculate new adaptive size [AdSize.getAdaptiveBanner] and [loadNextAd] manually.
@property (nonatomic) BOOL isRefreshAdaptiveSizeWhenChangingOrientation;
@end


@interface CASBannerView (SWIFT_EXTENSION(CleverAdsSolutions))
@property (nonatomic, getter=isHidden) BOOL hidden;
- (void)layoutSubviews;
- (void)didMoveToWindow;
- (void)didMoveToSuperview;
@end


SWIFT_PROTOCOL("_TtP18CleverAdsSolutions11CASCallback_")
@protocol CASCallback
@optional
/// Executed when the ad is displayed.
/// \param ad Information of displayed ad
///
- (void)willShownWithAd:(id <CASStatusHandler> _Nonnull)adStatus;
/// Executed when the ad is failed to display.
/// The Banner may automatically appear when the Ad is ready again.
/// This will trigger the [willShown] callback again.
/// \param message Error message
///
- (void)didShowAdFailedWithError:(NSString * _Nonnull)error;
/// Executed when the user clicks on an Ad.
- (void)didClickedAd;
/// Executed when the Ad is completed.
/// Banner Ad does not use this callback.
- (void)didCompletedAd;
/// Executed when the ad is closed.
/// The Banner Ad cannot be displayed automatically after this callback for the current view.
/// If you decide to show the Banner Ad on this view then you need refresh view visibility.
- (void)didClosedAd;
@end


@interface CASBannerView (SWIFT_EXTENSION(CleverAdsSolutions)) <CASCallback>
- (void)willShownWithAd:(id <CASStatusHandler> _Nonnull)adStatus;
- (void)didShowAdFailedWithError:(NSString * _Nonnull)error;
- (void)didClickedAd;
- (void)didCompletedAd;
- (void)didClosedAd;
@end



typedef SWIFT_ENUM(NSInteger, CASCCPAStatus, closed) {
/// Mediation ads network behavior
  CASCCPAStatusUndefined = 0,
/// User does not consent to the sale of his or her personal information in compliance with CCPA.
  CASCCPAStatusOptOutSale = 1,
/// User consents to the sale of his or her personal information in compliance with CCPA.
  CASCCPAStatusOptInSale = 2,
};


typedef SWIFT_ENUM(NSInteger, CASConsentStatus, closed) {
/// Mediation ads network behavior
  CASConsentStatusUndefined = 0,
/// User consents to behavioral targeting in compliance with GDPR.
  CASConsentStatusAccepted = 1,
/// User does not consent to behavioral targeting in compliance with GDPR.
  CASConsentStatusDenied = 2,
};


SWIFT_PROTOCOL("_TtP18CleverAdsSolutions15CASLoadDelegate_")
@protocol CASLoadDelegate
- (void)onAdLoaded:(enum CASType)adType;
- (void)onAdFailedToLoad:(enum CASType)adType withError:(NSString * _Nullable)error;
@end

typedef SWIFT_ENUM(NSInteger, CASLoadingManagerMode, closed) {
/// Automatic control loading mediation ads.
/// Provides frequent polling of mediation networks for advertising content.
/// May increase coverage with more expensive ads.
/// But this will run more background processes that slow down the application.
  CASLoadingManagerModeFastestRequests = 0,
/// Automatic control loading mediation ads.
/// Provides frequent polling of mediation networks for advertising content.
/// May increase coverage with more expensive ads.
/// But this will run more background processes that slow down the application.
  CASLoadingManagerModeFastRequests = 1,
/// Automatic control loading mediation ads.
/// Provides balanced polling rate of mediation networks for advertising content.
/// Doesn’t significantly affect application performance.
  CASLoadingManagerModeOptimal = 2,
/// Automatic control loading mediation ads.
/// Provides slow polling of mediation networks for advertising content.
/// This helps to reduce the impact of background processes on the application.
/// At the same time, do not lose much of the relevance of the high cost of advertising content.
/// Reduces memory reservations for advertising content.
  CASLoadingManagerModeHighePerformance = 3,
/// Automatic control loading mediation ads.
/// Provides slow polling of mediation networks for advertising content.
/// This helps to reduce the impact of background processes on the application.
/// At the same time, do not lose much of the relevance of the high cost of advertising content.
/// Reduces memory reservations for advertising content.
  CASLoadingManagerModeHighestPerformance = 4,
/// Manual control loading mediation ads.
/// Provides minimal impact on application performance.
/// But it requires manual preparation of advertising content for display.
/// Use ad loading methods before trying to show:
/// [MediationManager.loadInterstitial], [MediationManager.loadRewardedVideo], [CASBannerView.loadNextAd]
/// Reduces memory reservations for advertising content.
  CASLoadingManagerModeManual = 5,
};

@protocol CASStatusDelegate;

SWIFT_CLASS("_TtC18CleverAdsSolutions19CASMediationManager")
@interface CASMediationManager : NSObject
/// Weak event on [AdType] load response.
@property (nonatomic, weak) id <CASLoadDelegate> _Nullable adLoadDelegate;
/// Weak event on Network unit status changed.
@property (nonatomic, weak) id <CASStatusDelegate> _Nullable adStatusDelegate;
@property (nonatomic, readonly, copy) NSString * _Nonnull managerID;
@property (nonatomic, readonly) BOOL isDemoAdMode;
/// Get current [AdsSettings] for read/write.
@property (nonatomic, readonly, strong) CASSettings * _Nonnull settings;
/// Check is visible [AdType.Interstitial] or [AdType.Rewarded] right now.
@property (nonatomic, readonly) BOOL isFullscreenAdVisible;
/// Manual load Interstitial Ad.
/// You should only use this method if [AdsSettings.loadingMode] == [LoadingManagerMode.Manual] is active.
/// Please call load before each show ad.
/// You can get a callback for the successful loading of an ad by subscribe [onAdLoadEvent].
- (void)loadInterstitial;
/// Manual load Rewarded Video Ad.
/// You should only use this method if [AdsSettings.loadingMode] == [LoadingManagerMode.Manual] is active.
/// Please call load before each show ad.
/// You can get a callback for the successful loading of an ad by subscribe [onAdLoadEvent].
- (void)loadRewardedVideo;
/// Check selected [callback] is active for target [type]
- (BOOL)isValidCallbackWithType:(enum CASType)type callback:(id <CASCallback> _Nonnull)callback SWIFT_WARN_UNUSED_RESULT;
/// Check ready ad [type]
- (BOOL)isAdReadyWithType:(enum CASType)type SWIFT_WARN_UNUSED_RESULT;
/// Force show ad by selected [type].
/// Subscribe [callback] to current shown.
- (void)showFromRootViewController:(UIViewController * _Nonnull)controller type:(enum CASType)type callback:(id <CASCallback> _Nullable)callback;
/// Get last active mediation ad name of selected [type].
/// Can return Empty Sting.
- (NSString * _Nonnull)getLastActiveMediationWithType:(enum CASType)type SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface CASMediationManager (SWIFT_EXTENSION(CleverAdsSolutions))
/// Ad [type] is processing.
- (BOOL)isEnabledWithType:(enum CASType)type SWIFT_WARN_UNUSED_RESULT;
/// Set [enabled] ad [type] to processing.
/// The state will not be saved between sessions.
- (void)setEnabled:(BOOL)enabled type:(enum CASType)type;
@end


@interface CASMediationManager (SWIFT_EXTENSION(CleverAdsSolutions))
/// Enable manual call [onPause] and [onResume]
/// Default: false and state changed with change state by NotificationCenter
- (void)setManualPauseControl:(BOOL)isManual;
/// Pause [MediationManager] processing.
/// Can be paused automatically with change state main activity.
/// For control automatically mode use [setManualPauseControl]
- (void)onPause;
/// Resume [MediationManager] processing.
/// Can be paused automatically with change state main activity.
/// For control automatically mode use [setManualPauseControl]
- (void)onResume;
@end


@interface CASMediationManager (SWIFT_EXTENSION(CleverAdsSolutions))
/// Current banner ad size
/// We recommended set once immediately after [CAS.crete].
/// If [CASSettings.loadingMode] == [CASLoadingManagerMode.Manual]
/// then please call [CASBannerView.loadNextAd] after banner size changed.
- (CASSize * _Nonnull)getBannerSize SWIFT_WARN_UNUSED_RESULT;
/// Current banner ad size
/// We recommended set once immediately after [CAS.create].
/// If [CASSettings.loadingMode] == [CASLoadingManagerMode.Manual]
/// then please call [CASBannerView.loadNextAd] after banner size changed.
- (void)setBannerWithSize:(CASSize * _Nonnull)size;
/// Hide all [AdType.Banner] from the screen.
/// For hide specific banner only use View.setVisibility instead.
- (void)hideBanner;
@end





typedef SWIFT_ENUM(NSInteger, CASPosition, closed) {
  CASPositionTopCenter = 0,
  CASPositionTopLeft = 1,
  CASPositionTopRight = 2,
  CASPositionBottomCenter = 3,
  CASPositionBottomLeft = 4,
  CASPositionBottomRight = 5,
  CASPositionCenter = 6,
  CASPositionUndefined = 7,
};


SWIFT_CLASS("_TtC18CleverAdsSolutions11CASSettings")
@interface CASSettings : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (NSString * _Nullable)getPluginPlatformName SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getPluginPlatformVersion SWIFT_WARN_UNUSED_RESULT;
- (void)setPluginPlatformWithName:(NSString * _Nullable)name version:(NSString * _Nullable)version;
/// Sets CAS analytics collection is enabled for this app on this device.
/// This setting is persisted across app sessions.
/// Analytics services: Firebase Analytics
/// By default it is disabled.
- (BOOL)isAnalyticsCollectionEnabled SWIFT_WARN_UNUSED_RESULT;
/// Sets CAS analytics collection is enabled for this app on this device.
/// This setting is persisted across app sessions.
/// Analytics services: Firebase Analytics
/// By default it is disabled.
- (void)setAnalyticsCollectionWithEnabled:(BOOL)enabled;
/// Identifiers corresponding to test devices which will always request test ads.
/// The test device identifier for the current device is logged to the console when the first
/// ad request is made.
- (NSArray<NSString *> * _Nonnull)getTestDeviceIDs SWIFT_WARN_UNUSED_RESULT;
/// Identifiers corresponding to test devices which will always request test ads.
/// The test device identifier for the current device is logged to the console when the first
/// ad request is made.
- (void)setTestDeviceWithIds:(NSArray<NSString *> * _Nonnull)ids;
/// Interval display banner between load next ad in seconds.
/// Default: 30 seconds.
- (NSInteger)getBannerRefreshInterval SWIFT_WARN_UNUSED_RESULT;
/// Interval display banner between load next ad in seconds.
/// Default: 30 seconds.
- (void)setBannerRefreshWithInterval:(NSInteger)interval;
/// The interval between impressions Interstitial Ad in seconds.
/// Default: 0 seconds.
- (NSInteger)getInterstitialInterval SWIFT_WARN_UNUSED_RESULT;
/// The interval between impressions Interstitial Ad in seconds.
- (void)setInterstitialWithInterval:(NSInteger)interval;
/// Restart interval until next Interstitial ad display.
/// By default, the interval before first Interstitial Ad impression is ignored.
/// You can use this method to delay displaying ad.
- (void)restartInterstitialInterval;
/// GDPR user Consent SDK Implementation for ads on session.
- (void)updateUserWithConsent:(enum CASConsentStatus)consent;
/// Whether or not user has opted out of the sale of their personal information.
/// Default .undefined
- (enum CASCCPAStatus)getCCPAStatus SWIFT_WARN_UNUSED_RESULT;
/// Whether or not user has opted out of the sale of their personal information.
- (void)updateCCPAWithStatus:(enum CASCCPAStatus)status;
/// Is enabled forces sdk to filter ads with violence, drugs, etc
/// Default: nill
- (enum CASAudience)getTaggedAudience SWIFT_WARN_UNUSED_RESULT;
/// Ad filters by Audience
/// Default: Tagged Mixed Audience
- (void)setTaggedWithAudience:(enum CASAudience)audience;
- (void)setWaitConsentToInitialize;
/// Debug log mode for native mediation SDK.
/// Default: false
- (BOOL)isDebugMode SWIFT_WARN_UNUSED_RESULT;
/// Debug log mode for native mediation SDK.
/// Default: false
- (void)setDebugMode:(BOOL)enabled;
/// Muted sounds in ads
/// Default: false
- (BOOL)isMutedAdSounds SWIFT_WARN_UNUSED_RESULT;
- (void)setMuteAdSoundsTo:(BOOL)muted;
/// Mediation loading manager mode.
/// Default: [LoadingManagerMode.Optimal]
- (enum CASLoadingManagerMode)getLoadingMode SWIFT_WARN_UNUSED_RESULT;
/// Mediation loading manager mode.
/// Default: [LoadingManagerMode.Optimal]
- (void)setLoadingWithMode:(enum CASLoadingManagerMode)mode;
@end


SWIFT_CLASS("_TtC18CleverAdsSolutions7CASSize")
@interface CASSize : NSObject
/// (width, height)
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIWindow;

@interface CASSize (SWIFT_EXTENSION(CleverAdsSolutions))
/// Standard banner size 320dp width and 50dp height
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CASSize * _Nonnull banner;)
+ (CASSize * _Nonnull)banner SWIFT_WARN_UNUSED_RESULT;
/// Leaderboard banner size 728dp width and 90dp height
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CASSize * _Nonnull leaderboard;)
+ (CASSize * _Nonnull)leaderboard SWIFT_WARN_UNUSED_RESULT;
/// Medium Rectangle size 300dp width and 250dp height
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CASSize * _Nonnull mediumRectangle;)
+ (CASSize * _Nonnull)mediumRectangle SWIFT_WARN_UNUSED_RESULT;
/// Typically, Smart Banners on phones have a <code>banner</code> size.
/// Or on tablets a <code>leaderboard</code> size.
+ (CASSize * _Nonnull)getSmartBanner SWIFT_WARN_UNUSED_RESULT;
/// Create Adaptive AdSize placed in container for current screen orientation.
/// Container height cannot be less than 50dp.
/// Pick the best ad size, adaptive banners use fixed aspect ratios instead of fixed heights.
/// This results in banner ads that occupy a more consistent portion of the screen across devices and provide opportunities for improved performance.
/// seealso:
/// <a href="https://developers.google.com/admob/ios/banner/adaptive">Google Adaptive Banner</a>
///
/// returns:
/// Adaptive banner size
+ (CASSize * _Nonnull)getAdaptiveBannerInContainer:(UIView * _Nonnull)inContainer SWIFT_WARN_UNUSED_RESULT;
/// Create Adaptive AdSize with screen width for current orientation.
/// Pick the best ad size, adaptive banners use fixed aspect ratios instead of fixed heights.
/// This results in banner ads that occupy a more consistent portion of the screen across devices and provide opportunities for improved performance.
/// <a href="https://developers.google.com/admob/ios/banner/adaptive">Google Adaptive Banner</a>
///
/// returns:
/// Adaptive banner size
+ (CASSize * _Nonnull)getAdaptiveBannerInWindow:(UIWindow * _Nonnull)inWindow SWIFT_WARN_UNUSED_RESULT;
/// Create Adaptive AdSize with [maxWidthDPI] for current screen orientation.
/// Pick the best ad size, adaptive banners use fixed aspect ratios instead of fixed heights.
/// This results in banner ads that occupy a more consistent portion of the screen across devices and provide opportunities for improved performance.
/// <a href="https://developers.google.com/admob/ios/banner/adaptive">Google Adaptive Banner</a>
///
/// returns:
/// Adaptive banner size
+ (CASSize * _Nonnull)getAdaptiveBannerForMaxWidth:(CGFloat)maxWidth SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP18CleverAdsSolutions17CASStatusDelegate_")
@protocol CASStatusDelegate
- (void)onAdStatusChanged:(id <CASStatusHandler> _Nonnull)status;
@end


typedef SWIFT_ENUM(NSInteger, CASType, closed) {
  CASTypeBanner = 0,
  CASTypeInterstitial = 1,
  CASTypeRewarded = 2,
  CASTypeNative = 3,
  CASTypeNone = 4,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#elif defined(__ARM_ARCH_7A__) && __ARM_ARCH_7A__
// Generated by Apple Swift version 5.2.2 (swiftlang-1103.0.32.6 clang-1103.0.32.51)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreGraphics;
@import ObjectiveC;
@import UIKit;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CleverAdsSolutions",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class CASSettings;
@class CASMediationManager;

SWIFT_CLASS("_TtC18CleverAdsSolutions3CAS")
@interface CAS : NSObject
+ (NSString * _Nonnull)getSDKVersion SWIFT_WARN_UNUSED_RESULT;
/// Get singleton instance for configure all mediation managers
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CASSettings * _Nonnull settings;)
+ (CASSettings * _Nonnull)settings SWIFT_WARN_UNUSED_RESULT;
/// Get last initialized [MediationManager]
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CASMediationManager * _Nullable manager;)
+ (CASMediationManager * _Nullable)manager SWIFT_WARN_UNUSED_RESULT;
/// Initialize new [MediationManager] and save in [manager] field.
/// Can be called for different identifiers to create different managers.
/// After initialization, advertising content of [enabledAdTypes] is loading automatically.
/// \param managerID CAS manager (Placement) identifier or null when matches the app package
///
/// \param enableTypes Enabled Ad types for loading automatically.
/// Ad types can be enabled manually after initialize by [MediationManager.setEnabled]
///
/// \param demoAdMode Enable demo mode that will always request test ads
///
/// \param onInit Initialization listener
///
+ (CASMediationManager * _Nonnull)createWithManagerID:(NSString * _Nonnull)managerID enableTypes:(NSUInteger)enableTypes demoAdMode:(BOOL)demoAdMode onInit:(void (^ _Nullable)(BOOL, NSString * _Nullable))onInit SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

enum CASType : NSInteger;

SWIFT_PROTOCOL("_TtP18CleverAdsSolutions16CASStatusHandler_")
@protocol CASStatusHandler
@property (nonatomic, readonly) enum CASType adType;
@property (nonatomic, readonly, copy) NSString * _Nonnull status;
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
@property (nonatomic, readonly, copy) NSString * _Nonnull versionInfo;
@property (nonatomic, readonly, copy) NSString * _Nonnull error;
- (BOOL)isAdCached SWIFT_WARN_UNUSED_RESULT;
- (void)toggleIgnoreMode;
@end


SWIFT_CLASS_NAMED("CASAgent")
@interface CASAgent : NSObject <CASStatusHandler>
@property (nonatomic, readonly, copy) NSString * _Nonnull status;
@property (nonatomic, readonly) enum CASType adType;
@property (nonatomic, readonly, copy) NSString * _Nonnull error;
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, copy) NSString * _Nonnull versionInfo;
- (BOOL)isAdCached SWIFT_WARN_UNUSED_RESULT;
- (void)toggleIgnoreMode;
@end


SWIFT_PROTOCOL("_TtP18CleverAdsSolutions19CASAnalyticsHandler_")
@protocol CASAnalyticsHandler
- (void)log:(NSString * _Nonnull)eventName :(NSDictionary<NSString *, id> * _Nonnull)map;
@end

typedef SWIFT_ENUM(NSInteger, CASAudience, closed) {
  CASAudienceUndefined = 0,
  CASAudienceChildren = 1,
  CASAudienceNotChildren = 2,
};


SWIFT_CLASS_NAMED("CASBannerAgent")
@interface CASBannerAgent : CASAgent
- (nonnull instancetype)init;
- (BOOL)isAdCached SWIFT_WARN_UNUSED_RESULT;
@end

@class NSCoder;
@class UIViewController;
@protocol CASCallback;
@class CASSize;
enum CASPosition : NSInteger;

SWIFT_CLASS("_TtC18CleverAdsSolutions13CASBannerView")
@interface CASBannerView : UIView
- (nonnull instancetype)initWithManager:(CASMediationManager * _Nullable)manager OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
/// This view controller is used to present an overlay when the ad is clicked.
/// It should normally be set to the view controller that contains the CASBannerView
@property (nonatomic, weak) UIViewController * _Nullable rootViewController;
@property (nonatomic, weak) CASMediationManager * _Nullable manager;
@property (nonatomic, weak) id <CASCallback> _Nullable delegate;
/// The size of the Banner Ad.
@property (nonatomic, strong) CASSize * _Nonnull adSize;
/// The position of the Banner Ad using CASPosition.
@property (nonatomic) enum CASPosition adPostion;
/// Manual load Banner Ad or reload current loaded Ad for cancel impression.
/// You should use this method on [AdsSettings.loadingMode] == [LoadingManagerMode.Manual] before show ad.
/// This functionality is available only after [CAS.initialize].
/// You can get a callback for the successful loading of an ad by subscribe [MediationManager.onAdLoadEvent].
- (void)loadNextAd;
/// The adaptive banner size depends on the screen orientation.
/// If is TRUE then the size will be automatically recalculate when the orientation is changed.
/// If is FALSE then the banner will be hidden and it will be required
/// to calculate new adaptive size [AdSize.getAdaptiveBanner] and [loadNextAd] manually.
@property (nonatomic) BOOL isRefreshAdaptiveSizeWhenChangingOrientation;
@end


@interface CASBannerView (SWIFT_EXTENSION(CleverAdsSolutions))
@property (nonatomic, getter=isHidden) BOOL hidden;
- (void)layoutSubviews;
- (void)didMoveToWindow;
- (void)didMoveToSuperview;
@end


SWIFT_PROTOCOL("_TtP18CleverAdsSolutions11CASCallback_")
@protocol CASCallback
@optional
/// Executed when the ad is displayed.
/// \param ad Information of displayed ad
///
- (void)willShownWithAd:(id <CASStatusHandler> _Nonnull)adStatus;
/// Executed when the ad is failed to display.
/// The Banner may automatically appear when the Ad is ready again.
/// This will trigger the [willShown] callback again.
/// \param message Error message
///
- (void)didShowAdFailedWithError:(NSString * _Nonnull)error;
/// Executed when the user clicks on an Ad.
- (void)didClickedAd;
/// Executed when the Ad is completed.
/// Banner Ad does not use this callback.
- (void)didCompletedAd;
/// Executed when the ad is closed.
/// The Banner Ad cannot be displayed automatically after this callback for the current view.
/// If you decide to show the Banner Ad on this view then you need refresh view visibility.
- (void)didClosedAd;
@end


@interface CASBannerView (SWIFT_EXTENSION(CleverAdsSolutions)) <CASCallback>
- (void)willShownWithAd:(id <CASStatusHandler> _Nonnull)adStatus;
- (void)didShowAdFailedWithError:(NSString * _Nonnull)error;
- (void)didClickedAd;
- (void)didCompletedAd;
- (void)didClosedAd;
@end



typedef SWIFT_ENUM(NSInteger, CASCCPAStatus, closed) {
/// Mediation ads network behavior
  CASCCPAStatusUndefined = 0,
/// User does not consent to the sale of his or her personal information in compliance with CCPA.
  CASCCPAStatusOptOutSale = 1,
/// User consents to the sale of his or her personal information in compliance with CCPA.
  CASCCPAStatusOptInSale = 2,
};


typedef SWIFT_ENUM(NSInteger, CASConsentStatus, closed) {
/// Mediation ads network behavior
  CASConsentStatusUndefined = 0,
/// User consents to behavioral targeting in compliance with GDPR.
  CASConsentStatusAccepted = 1,
/// User does not consent to behavioral targeting in compliance with GDPR.
  CASConsentStatusDenied = 2,
};


SWIFT_PROTOCOL("_TtP18CleverAdsSolutions15CASLoadDelegate_")
@protocol CASLoadDelegate
- (void)onAdLoaded:(enum CASType)adType;
- (void)onAdFailedToLoad:(enum CASType)adType withError:(NSString * _Nullable)error;
@end

typedef SWIFT_ENUM(NSInteger, CASLoadingManagerMode, closed) {
/// Automatic control loading mediation ads.
/// Provides frequent polling of mediation networks for advertising content.
/// May increase coverage with more expensive ads.
/// But this will run more background processes that slow down the application.
  CASLoadingManagerModeFastestRequests = 0,
/// Automatic control loading mediation ads.
/// Provides frequent polling of mediation networks for advertising content.
/// May increase coverage with more expensive ads.
/// But this will run more background processes that slow down the application.
  CASLoadingManagerModeFastRequests = 1,
/// Automatic control loading mediation ads.
/// Provides balanced polling rate of mediation networks for advertising content.
/// Doesn’t significantly affect application performance.
  CASLoadingManagerModeOptimal = 2,
/// Automatic control loading mediation ads.
/// Provides slow polling of mediation networks for advertising content.
/// This helps to reduce the impact of background processes on the application.
/// At the same time, do not lose much of the relevance of the high cost of advertising content.
/// Reduces memory reservations for advertising content.
  CASLoadingManagerModeHighePerformance = 3,
/// Automatic control loading mediation ads.
/// Provides slow polling of mediation networks for advertising content.
/// This helps to reduce the impact of background processes on the application.
/// At the same time, do not lose much of the relevance of the high cost of advertising content.
/// Reduces memory reservations for advertising content.
  CASLoadingManagerModeHighestPerformance = 4,
/// Manual control loading mediation ads.
/// Provides minimal impact on application performance.
/// But it requires manual preparation of advertising content for display.
/// Use ad loading methods before trying to show:
/// [MediationManager.loadInterstitial], [MediationManager.loadRewardedVideo], [CASBannerView.loadNextAd]
/// Reduces memory reservations for advertising content.
  CASLoadingManagerModeManual = 5,
};

@protocol CASStatusDelegate;

SWIFT_CLASS("_TtC18CleverAdsSolutions19CASMediationManager")
@interface CASMediationManager : NSObject
/// Weak event on [AdType] load response.
@property (nonatomic, weak) id <CASLoadDelegate> _Nullable adLoadDelegate;
/// Weak event on Network unit status changed.
@property (nonatomic, weak) id <CASStatusDelegate> _Nullable adStatusDelegate;
@property (nonatomic, readonly, copy) NSString * _Nonnull managerID;
@property (nonatomic, readonly) BOOL isDemoAdMode;
/// Get current [AdsSettings] for read/write.
@property (nonatomic, readonly, strong) CASSettings * _Nonnull settings;
/// Check is visible [AdType.Interstitial] or [AdType.Rewarded] right now.
@property (nonatomic, readonly) BOOL isFullscreenAdVisible;
/// Manual load Interstitial Ad.
/// You should only use this method if [AdsSettings.loadingMode] == [LoadingManagerMode.Manual] is active.
/// Please call load before each show ad.
/// You can get a callback for the successful loading of an ad by subscribe [onAdLoadEvent].
- (void)loadInterstitial;
/// Manual load Rewarded Video Ad.
/// You should only use this method if [AdsSettings.loadingMode] == [LoadingManagerMode.Manual] is active.
/// Please call load before each show ad.
/// You can get a callback for the successful loading of an ad by subscribe [onAdLoadEvent].
- (void)loadRewardedVideo;
/// Check selected [callback] is active for target [type]
- (BOOL)isValidCallbackWithType:(enum CASType)type callback:(id <CASCallback> _Nonnull)callback SWIFT_WARN_UNUSED_RESULT;
/// Check ready ad [type]
- (BOOL)isAdReadyWithType:(enum CASType)type SWIFT_WARN_UNUSED_RESULT;
/// Force show ad by selected [type].
/// Subscribe [callback] to current shown.
- (void)showFromRootViewController:(UIViewController * _Nonnull)controller type:(enum CASType)type callback:(id <CASCallback> _Nullable)callback;
/// Get last active mediation ad name of selected [type].
/// Can return Empty Sting.
- (NSString * _Nonnull)getLastActiveMediationWithType:(enum CASType)type SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface CASMediationManager (SWIFT_EXTENSION(CleverAdsSolutions))
/// Ad [type] is processing.
- (BOOL)isEnabledWithType:(enum CASType)type SWIFT_WARN_UNUSED_RESULT;
/// Set [enabled] ad [type] to processing.
/// The state will not be saved between sessions.
- (void)setEnabled:(BOOL)enabled type:(enum CASType)type;
@end


@interface CASMediationManager (SWIFT_EXTENSION(CleverAdsSolutions))
/// Enable manual call [onPause] and [onResume]
/// Default: false and state changed with change state by NotificationCenter
- (void)setManualPauseControl:(BOOL)isManual;
/// Pause [MediationManager] processing.
/// Can be paused automatically with change state main activity.
/// For control automatically mode use [setManualPauseControl]
- (void)onPause;
/// Resume [MediationManager] processing.
/// Can be paused automatically with change state main activity.
/// For control automatically mode use [setManualPauseControl]
- (void)onResume;
@end


@interface CASMediationManager (SWIFT_EXTENSION(CleverAdsSolutions))
/// Current banner ad size
/// We recommended set once immediately after [CAS.crete].
/// If [CASSettings.loadingMode] == [CASLoadingManagerMode.Manual]
/// then please call [CASBannerView.loadNextAd] after banner size changed.
- (CASSize * _Nonnull)getBannerSize SWIFT_WARN_UNUSED_RESULT;
/// Current banner ad size
/// We recommended set once immediately after [CAS.create].
/// If [CASSettings.loadingMode] == [CASLoadingManagerMode.Manual]
/// then please call [CASBannerView.loadNextAd] after banner size changed.
- (void)setBannerWithSize:(CASSize * _Nonnull)size;
/// Hide all [AdType.Banner] from the screen.
/// For hide specific banner only use View.setVisibility instead.
- (void)hideBanner;
@end





typedef SWIFT_ENUM(NSInteger, CASPosition, closed) {
  CASPositionTopCenter = 0,
  CASPositionTopLeft = 1,
  CASPositionTopRight = 2,
  CASPositionBottomCenter = 3,
  CASPositionBottomLeft = 4,
  CASPositionBottomRight = 5,
  CASPositionCenter = 6,
  CASPositionUndefined = 7,
};


SWIFT_CLASS("_TtC18CleverAdsSolutions11CASSettings")
@interface CASSettings : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (NSString * _Nullable)getPluginPlatformName SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)getPluginPlatformVersion SWIFT_WARN_UNUSED_RESULT;
- (void)setPluginPlatformWithName:(NSString * _Nullable)name version:(NSString * _Nullable)version;
/// Sets CAS analytics collection is enabled for this app on this device.
/// This setting is persisted across app sessions.
/// Analytics services: Firebase Analytics
/// By default it is disabled.
- (BOOL)isAnalyticsCollectionEnabled SWIFT_WARN_UNUSED_RESULT;
/// Sets CAS analytics collection is enabled for this app on this device.
/// This setting is persisted across app sessions.
/// Analytics services: Firebase Analytics
/// By default it is disabled.
- (void)setAnalyticsCollectionWithEnabled:(BOOL)enabled;
/// Identifiers corresponding to test devices which will always request test ads.
/// The test device identifier for the current device is logged to the console when the first
/// ad request is made.
- (NSArray<NSString *> * _Nonnull)getTestDeviceIDs SWIFT_WARN_UNUSED_RESULT;
/// Identifiers corresponding to test devices which will always request test ads.
/// The test device identifier for the current device is logged to the console when the first
/// ad request is made.
- (void)setTestDeviceWithIds:(NSArray<NSString *> * _Nonnull)ids;
/// Interval display banner between load next ad in seconds.
/// Default: 30 seconds.
- (NSInteger)getBannerRefreshInterval SWIFT_WARN_UNUSED_RESULT;
/// Interval display banner between load next ad in seconds.
/// Default: 30 seconds.
- (void)setBannerRefreshWithInterval:(NSInteger)interval;
/// The interval between impressions Interstitial Ad in seconds.
/// Default: 0 seconds.
- (NSInteger)getInterstitialInterval SWIFT_WARN_UNUSED_RESULT;
/// The interval between impressions Interstitial Ad in seconds.
- (void)setInterstitialWithInterval:(NSInteger)interval;
/// Restart interval until next Interstitial ad display.
/// By default, the interval before first Interstitial Ad impression is ignored.
/// You can use this method to delay displaying ad.
- (void)restartInterstitialInterval;
/// GDPR user Consent SDK Implementation for ads on session.
- (void)updateUserWithConsent:(enum CASConsentStatus)consent;
/// Whether or not user has opted out of the sale of their personal information.
/// Default .undefined
- (enum CASCCPAStatus)getCCPAStatus SWIFT_WARN_UNUSED_RESULT;
/// Whether or not user has opted out of the sale of their personal information.
- (void)updateCCPAWithStatus:(enum CASCCPAStatus)status;
/// Is enabled forces sdk to filter ads with violence, drugs, etc
/// Default: nill
- (enum CASAudience)getTaggedAudience SWIFT_WARN_UNUSED_RESULT;
/// Ad filters by Audience
/// Default: Tagged Mixed Audience
- (void)setTaggedWithAudience:(enum CASAudience)audience;
- (void)setWaitConsentToInitialize;
/// Debug log mode for native mediation SDK.
/// Default: false
- (BOOL)isDebugMode SWIFT_WARN_UNUSED_RESULT;
/// Debug log mode for native mediation SDK.
/// Default: false
- (void)setDebugMode:(BOOL)enabled;
/// Muted sounds in ads
/// Default: false
- (BOOL)isMutedAdSounds SWIFT_WARN_UNUSED_RESULT;
- (void)setMuteAdSoundsTo:(BOOL)muted;
/// Mediation loading manager mode.
/// Default: [LoadingManagerMode.Optimal]
- (enum CASLoadingManagerMode)getLoadingMode SWIFT_WARN_UNUSED_RESULT;
/// Mediation loading manager mode.
/// Default: [LoadingManagerMode.Optimal]
- (void)setLoadingWithMode:(enum CASLoadingManagerMode)mode;
@end


SWIFT_CLASS("_TtC18CleverAdsSolutions7CASSize")
@interface CASSize : NSObject
/// (width, height)
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UIWindow;

@interface CASSize (SWIFT_EXTENSION(CleverAdsSolutions))
/// Standard banner size 320dp width and 50dp height
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CASSize * _Nonnull banner;)
+ (CASSize * _Nonnull)banner SWIFT_WARN_UNUSED_RESULT;
/// Leaderboard banner size 728dp width and 90dp height
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CASSize * _Nonnull leaderboard;)
+ (CASSize * _Nonnull)leaderboard SWIFT_WARN_UNUSED_RESULT;
/// Medium Rectangle size 300dp width and 250dp height
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) CASSize * _Nonnull mediumRectangle;)
+ (CASSize * _Nonnull)mediumRectangle SWIFT_WARN_UNUSED_RESULT;
/// Typically, Smart Banners on phones have a <code>banner</code> size.
/// Or on tablets a <code>leaderboard</code> size.
+ (CASSize * _Nonnull)getSmartBanner SWIFT_WARN_UNUSED_RESULT;
/// Create Adaptive AdSize placed in container for current screen orientation.
/// Container height cannot be less than 50dp.
/// Pick the best ad size, adaptive banners use fixed aspect ratios instead of fixed heights.
/// This results in banner ads that occupy a more consistent portion of the screen across devices and provide opportunities for improved performance.
/// seealso:
/// <a href="https://developers.google.com/admob/ios/banner/adaptive">Google Adaptive Banner</a>
///
/// returns:
/// Adaptive banner size
+ (CASSize * _Nonnull)getAdaptiveBannerInContainer:(UIView * _Nonnull)inContainer SWIFT_WARN_UNUSED_RESULT;
/// Create Adaptive AdSize with screen width for current orientation.
/// Pick the best ad size, adaptive banners use fixed aspect ratios instead of fixed heights.
/// This results in banner ads that occupy a more consistent portion of the screen across devices and provide opportunities for improved performance.
/// <a href="https://developers.google.com/admob/ios/banner/adaptive">Google Adaptive Banner</a>
///
/// returns:
/// Adaptive banner size
+ (CASSize * _Nonnull)getAdaptiveBannerInWindow:(UIWindow * _Nonnull)inWindow SWIFT_WARN_UNUSED_RESULT;
/// Create Adaptive AdSize with [maxWidthDPI] for current screen orientation.
/// Pick the best ad size, adaptive banners use fixed aspect ratios instead of fixed heights.
/// This results in banner ads that occupy a more consistent portion of the screen across devices and provide opportunities for improved performance.
/// <a href="https://developers.google.com/admob/ios/banner/adaptive">Google Adaptive Banner</a>
///
/// returns:
/// Adaptive banner size
+ (CASSize * _Nonnull)getAdaptiveBannerForMaxWidth:(CGFloat)maxWidth SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_PROTOCOL("_TtP18CleverAdsSolutions17CASStatusDelegate_")
@protocol CASStatusDelegate
- (void)onAdStatusChanged:(id <CASStatusHandler> _Nonnull)status;
@end


typedef SWIFT_ENUM(NSInteger, CASType, closed) {
  CASTypeBanner = 0,
  CASTypeInterstitial = 1,
  CASTypeRewarded = 2,
  CASTypeNative = 3,
  CASTypeNone = 4,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop

#endif
